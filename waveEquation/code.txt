class Fluid {
	int width;
	int height;

	glm::vec3 *buffer[2];
	int renderBuffer;

	glm::vec3 *normal;
	glm::vec3 *tangent;

	float k1, k2, k3;

	vector<unsigned int>indices;


	void Evaluate()
	{
		for (int j = 1; j < height - 1; j++)
		{
			const glm::vec3 *crnt = buffer[renderBuffer] + j * width;
			glm::vec3 *prev = buffer[1 - renderBuffer] + j * width;
			for (int i = 1; i < width - 1; i++)
			{
				prev[i].z = k1 * crnt[i].z +
					k2 * prev[i].z +
					k3 * (crnt[i + 1].z +
						crnt[i - 1].z +
						crnt[i + width].z +
						crnt[i - width].z);
			}
		}
		renderBuffer = 1 - renderBuffer;
		for (int j = 1; j < height - 1; j++)
		{
			const glm::vec3 *next = buffer[renderBuffer] + j * width;
			glm::vec3 *nrml = normal + j * width;
			glm::vec3 *tang = tangent + j * width;
			for (int i = 1; i < width - 1; i++)
			{
				nrml[i].x = next[i - 1].z - next[i + 1].z;
				nrml[i].y = next[i - width].z - next[i + width].z;
				tang[i].z = next[i + 1].z - next[i - 1].z;
			}
		}
	}
public:
	Fluid(int n, int m, float d, float c, float t, float mu)
	{
		width = n;
		height = m;
		int count = n * m;

		buffer[0] = new glm::vec3[count];
		buffer[1] = new glm::vec3[count];
		renderBuffer = 0;

		normal = new glm::vec3[count];
		tangent = new glm::vec3[count];

		float f1 = c * c*t*t / (d*d);
		float f2 = 1.0F / (mu*t + 2);
		k1 = (4.0F - 8.0F*f1)*f2;
		k2 = (mu*t - 2)*f2;
		k3 = 2.0F*f1*f2;
		int a = 0;
		for (int j = 0; j < m; j++)
		{
			float y = d * j;
			for (int i = 0; i < n; i++)
			{
				int b = rand() % 10;
				float c = b * 0.2;
				buffer[0][a] = glm::vec3(d*i, y, c);
				buffer[1][a] = buffer[0][a];
				normal[a] = glm::vec3(0.0F, 0.0F, 2.0F*d);
				tangent[a] = glm::vec3(2.0F*d, 0.0F, 0.0F);
				a++;
			}
		}
		for (int j = 1; j < m; j++)
		{
			for (int i = 0; i < n - 1; i++)
			{
				indices.push_back(j*n + i);
				indices.push_back(j*n + i - n);
				indices.push_back(j*n + i - n + 1);

				indices.push_back(j*n + i);
				indices.push_back(j*n + i - n + 1);
				indices.push_back(j*n + i + 1);
			}
		}
	}
	void renderFluid()
	{
		
		Evaluate();
		int flag =renderBuffer;
		vector<float>data;
		int indexCount = indices.size();

		for (int i = 0; i < width*height; ++i)
		{
			data.push_back(buffer[flag][i].x);
			data.push_back(buffer[flag][i].y);
			data.push_back(buffer[flag][i].z);

			data.push_back(normal[i].x);
			data.push_back(normal[i].y);
			data.push_back(normal[i].z);
		}

		unsigned int FluidVAO, FluidVBO, FluidEBO;
		glGenVertexArrays(1, &FluidVAO);
		glGenBuffers(1, &FluidVBO);
		glGenBuffers(1, &FluidEBO);

		glBindVertexArray(FluidVAO);
		glBindBuffer(GL_ARRAY_BUFFER, FluidVBO);
		glBufferData(GL_ARRAY_BUFFER, data.size() * sizeof(float), &data[0], GL_STREAM_DRAW);

		glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, FluidEBO);
		glBufferData(GL_ELEMENT_ARRAY_BUFFER, indices.size() * sizeof(unsigned int), &indices[0], GL_STREAM_DRAW);

		float stride = (3 + 3) * sizeof(float);

		glEnableVertexAttribArray(0);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, stride, (void*)0);
		glEnableVertexAttribArray(1);
		glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, stride, (void*)(3 * sizeof(float)));

		glBindVertexArray(FluidVAO);
		glDrawElements(GL_TRIANGLES, indexCount, GL_UNSIGNED_INT, 0);
		
		glBindBuffer(GL_ARRAY_BUFFER, 0);
		glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
		glBindVertexArray(0);
	}
	~Fluid()
	{
		delete[]tangent;
		delete[]normal;
		delete[]buffer[0];
		delete[]buffer[1];
	}
};
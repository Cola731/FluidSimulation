class Fluid {
private:
	int width;
	int height;
	float d;
	glm::vec3 *buffer;
	glm::vec3 *normal;
	const float PI = 3.1415926535;
	vector<unsigned int>indices;

	float A1 = 0.4; glm::vec2 D1 = glm::vec2(0.2, 0.8); float w1 = PI * 0.3; float phi1 = PI * 0.2; float k1 = 1.5;
	float A2 = 0.5; glm::vec2 D2 = glm::vec2(0.7, 0.3); float w2 = PI * 0.35; float phi2 = PI * 0.25; float k2 = 1;
	float A3 = 0.6; glm::vec2 D3 = glm::vec2(1.0, 0.0); float w3 = PI * 0.4; float phi3 = PI * 0.3; float k3 = 1.5;
	float W(float A, glm::vec2 D, glm::vec2 Pos, float w, float time, float phi, float k)
	{
		return 2 * A*pow((sin(dot(D, Pos)*w + time * phi) + 1)*0.5, k);
	}
	float WD(glm::vec2 D, glm::vec2 Pos, float w, float time, float phi, float k)
	{
		return pow((sin(dot(D, Pos)*w + time * phi) + 1)*0.5, k - 1)*cos(dot(D, Pos)*w + time * phi);
	}
	void Evaluate(float time)
	{
		for (int j = 0; j < height; j++)
		{
			glm::vec3 *crnt = buffer + j * width;
			for (int i = 0; i < width; i++)
			{
				float x = i * d;
				float y = j * d;
				float H = 0;

				glm::vec2 pos = glm::vec2(x, y);
				H += W(A1, D1, pos, w1, time, phi1, k1);
				H += W(A2, D2, pos, w2, time, phi2, k2);
				H += W(A3, D3, pos, w3, time, phi3, k3);

				crnt[i].z = H;

				float NX = 0, NY = 0;
				float wd1 = WD(D1, glm::vec2(x, y), w1, time, phi1, k1);
				NX += k1 * D1.x*w1*A1*wd1; NY += k1 * D1.y*w1*A1*wd1;
				float wd2 = WD(D2, glm::vec2(x, y), w2, time, phi2, k2);
				NX += k2 * D2.x*w2*A2*wd2; NY += k2 * D2.y*w2*A2*wd2;
				float wd3 = WD(D3, glm::vec2(x, y), w3, time, phi3, k3);
				NX += k3 * D3.x*w3*A3*wd3; NY += k3 * D3.y*w3*A3*wd3;
				NX = -NX; NY = -NY;

				glm::vec3 *nrml = normal + j * width;
				nrml[i].x = NX; nrml[i].y = NY;
			}
		}
	}
public:
	Fluid(int n, int m, float dd)
	{
		width = n;
		height = m;
		int count = n * m;
		d = dd;
		buffer = new glm::vec3[count];
		normal = new glm::vec3[count];

		int a = 0;
		for (int j = 0; j < m; j++)
		{
			float y = d * j;
			for (int i = 0; i < n; i++)
			{
				buffer[a] = glm::vec3(d*i, y, 0);
				normal[a] = glm::vec3(0, 0, 1.0);
				a++;
			}
		}
		for (int j = 1; j < m; j++)
		{
			for (int i = 0; i < n - 1; i++)
			{
				indices.push_back(j*n + i);
				indices.push_back(j*n + i - n);
				indices.push_back(j*n + i - n + 1);

				indices.push_back(j*n + i);
				indices.push_back(j*n + i - n + 1);
				indices.push_back(j*n + i + 1);
			}
		}
	}
	void renderFluid(float time)
	{

		Evaluate(time);
		vector<float>data;
		int indexCount = indices.size();

		for (int i = 0; i < width*height; ++i)
		{
			data.push_back(buffer[i].x);
			data.push_back(buffer[i].y);
			data.push_back(buffer[i].z);


			data.push_back(normal[i].x);
			data.push_back(normal[i].y);
			data.push_back(normal[i].z);
		}

		unsigned int FluidVAO, FluidVBO, FluidEBO;
		glGenVertexArrays(1, &FluidVAO);
		glGenBuffers(1, &FluidVBO);
		glGenBuffers(1, &FluidEBO);

		glBindVertexArray(FluidVAO);
		glBindBuffer(GL_ARRAY_BUFFER, FluidVBO);
		glBufferData(GL_ARRAY_BUFFER, data.size() * sizeof(float), &data[0], GL_STREAM_DRAW);

		glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, FluidEBO);
		glBufferData(GL_ELEMENT_ARRAY_BUFFER, indices.size() * sizeof(unsigned int), &indices[0], GL_STREAM_DRAW);

		float stride = (3 + 3) * sizeof(float);

		glEnableVertexAttribArray(0);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, stride, (void*)0);
		glEnableVertexAttribArray(1);
		glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, stride, (void*)(3 * sizeof(float)));

		glBindVertexArray(FluidVAO);
		glDrawElements(GL_TRIANGLES, indexCount, GL_UNSIGNED_INT, 0);

		glBindBuffer(GL_ARRAY_BUFFER, 0);
		glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
		glBindVertexArray(0);
	}
	~Fluid()
	{
		delete[]normal;
		delete[]buffer;
	}
};